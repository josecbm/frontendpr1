{"version":3,"sources":["logo.svg","components/graph.jsx","components/treeView.jsx","App.js","reportWebVitals.js","index.js"],"names":["Graph","interval","useState","tiempo","Total","Libre","Utilizada","Porcentaje","data","setData","segundos","useEffect","ctx","document","getElementById","Chart","type","labels","map","d","datasets","label","backgroundColor","borderColor","borderWidth","getInterval","a","axios","get","then","res","catch","e","console","log","response","info","push","setInterval","clearInterval","className","id","width","height","TreeView","key","index","nodes","setInfo","object","PID","PROCESS","Hijos","Procesos","RAM","rawData","preOrder","newArray","item","codigo","nombre","recorrido","C","length","toggled","App","process","setProcess","preventDefault","value","obj","mensaje","post","onChange","event","target","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.009fa48d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useEffect } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport interval from \"react-interval\";\r\n\r\nexport default function Graph() {\r\n  const [data, setData] = useState([\r\n    { tiempo: 0, Total: 0, Libre: 0, Utilizada: 0, Porcentaje: 0 },\r\n  ]);\r\n  let interval;\r\n  let segundos = 0;\r\n\r\n  useEffect(() => {\r\n    const ctx = document.getElementById(\"myChart\");\r\n    new Chart(ctx, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: data.map((d) => d.tiempo),\r\n        datasets: [\r\n          {\r\n            label: \"Total\",\r\n            data: data.map((d) => d.Porcentaje),\r\n            backgroundColor: [\"Red\"],\r\n            borderColor: [\"Red\"],\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: \"Libre\",\r\n            data: data.map((d) => d.Libre),\r\n            backgroundColor: [\"Blue\"],\r\n            borderColor: [\"Blue\"],\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: \"Utilizada\",\r\n            data: data.map((d) => d.Utilizada),\r\n            backgroundColor: [\"Green\"],\r\n            borderColor: [\"Green\"],\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n    });\r\n  });\r\n\r\n  const setInfo = (info) => {\r\n    data.push({\r\n      tiempo: segundos,\r\n      Porcentaje: info.Porcentaje,\r\n      Utilizada: info.Utilizada,\r\n      Libre: info.Libre,\r\n    });\r\n    segundos = segundos + 3;\r\n    setData([...data]);\r\n  };\r\n\r\n  const getInterval = async () => {\r\n    let response = await axios\r\n      .get(\"http://3.18.225.89:3000/getMem\")\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setInfo(response);\r\n  };\r\n  useEffect(() => {\r\n    interval = setInterval(() => getInterval(), 3000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Grafica</h1>\r\n      <canvas id=\"myChart\" width=\"800\" height=\"800\" />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport TreeMenu from \"react-simple-tree-menu\";\r\nimport interval from \"react-interval\";\r\nimport { useEffect } from \"react\";\r\n// const treeData = [\r\n//     {\r\n//       key: 'first-level-node-1',\r\n//       label: 'Node 1 at the first level',\r\n//       nodes: [\r\n//         {\r\n//           key: 'second-level-node-1',\r\n//           label: 'Node 1 at the second level',\r\n//           nodes: [\r\n//             {\r\n//               key: 'third-level-node-1',\r\n//               label: 'Last node of the branch',\r\n//               nodes: [] // you can remove the nodes property or leave it as an empty array\r\n//             },\r\n//           ],\r\n//         },\r\n//       ],\r\n//     },\r\n//     {\r\n//       key: 'first-level-node-2',\r\n//       label: 'Node 2 at the first level',\r\n//     },\r\n//   ];\r\n\r\nconst treeData2 = {\r\n  \"first-level-node-1\": {\r\n    // key\r\n    label: \"Node 1 at the first level\",\r\n    index: 0, // decide the rendering order on the same level\r\n    nodes: {\r\n      \"second-level-node-1\": {\r\n        label: \"Node 1 at the second level\",\r\n        index: 0,\r\n        nodes: {\r\n          \"third-level-node-1\": {\r\n            label: \"Node 1 at the third level\",\r\n            index: 0,\r\n            nodes: {}, // you can remove the nodes property or leave it as an empty array\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  \"first-level-node-2\": {\r\n    label: \"Node 2 at the first level\",\r\n    index: 1,\r\n    nodes: {\r\n      \"second-level-node-2\": {\r\n        label: \"Node 1 at the third level\",\r\n        index: 0,\r\n        nodes: {}, // you can remove the nodes property or leave it as an empty array\r\n      },\r\n    },\r\n  },\r\n};\r\nexport default function TreeView() {\r\n  let interval;\r\n  const [data, setData] = useState({ key: 0, label: \"\", index: 0, nodes: [] });\r\n  const getInterval = async () => {\r\n    let response = await axios\r\n      .get(\"http://3.18.225.89:3000/getProc\")\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setInfo(response);\r\n  };\r\n  const setInfo = (info) => {\r\n    let object = {\r\n      PID: \"0\",\r\n      PROCESS: \"Procesos\",\r\n      Hijos: info.Procesos,\r\n      RAM: 0,\r\n    };\r\n    let rawData = preOrder(object);\r\n    console.log(rawData.Hijos);\r\n\r\n    const newArray = rawData.Hijos.map((item) => {\r\n      return { key: item.codigo, label: item.nombre, nodes: item.Hijos };\r\n    });\r\n    setData(newArray);\r\n    // console.log(data);\r\n    recorrido(info);\r\n  };\r\n\r\n  useEffect(() => {\r\n    interval = setInterval(() => getInterval(), 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  const preOrder = (item) => {\r\n    if (item) {\r\n      let { Hijos } = item;\r\n      if (Hijos) {\r\n        item.nodes = Hijos && Hijos.map((C) => preOrder(C));\r\n\r\n        if (item.nodes.length === 0) item.nodes = null;\r\n      }\r\n      return {\r\n        ...item,\r\n        nodes: Hijos && Hijos.length > 0 ? Hijos : null,\r\n        toggled: true,\r\n        Hijos,\r\n      };\r\n    }\r\n  };\r\n  const recorrido = (item) => {\r\n    // item.Procesos.forEach(proceso => {\r\n    //   console.log(proceso);\r\n    //   data.push({key: proceso.codigo })\r\n    //   if(proceso.nodes){\r\n    //     proceso.nodes.forEach(subproceso => {\r\n    //       console.log(subproceso);\r\n    //     });\r\n    //   }\r\n    // });\r\n  };\r\n  //console.log(data);\r\n  return (\r\n    <TreeMenu data={data} />\r\n    //<div></div>\r\n  );\r\n}\r\n","import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Cpu from \"./components/cpu\";\r\nimport Graph from \"./components/graph\";\r\nimport TreeView from \"./components/treeView\";\r\nimport axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [process, setProcess] = useState(\"\");\r\n\r\n  async function handleClick(e) {\r\n    console.log(process);\r\n    e.preventDefault();\r\n    console.log(process.value);\r\n    let obj = {\r\n      id: process.value,\r\n      mensaje: \"main\",\r\n    };\r\n    console.log(obj);\r\n    let response = await axios.post(\"http://3.18.225.89:3000/delProc\", obj);\r\n    console.log(response.data);\r\n  }\r\n  function handleChange(event) {\r\n    setProcess({ value: event.target.value });\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Practica 1 Sopes 2</h1>\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        <div className=\"App-graph\">\r\n          <Graph />\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div className=\"App-treeView\">\r\n          <TreeView />\r\n          <br />\r\n          <input type=\"text\" onChange={handleChange}></input>\r\n          <button onClick={handleClick}>Kill Proccess</button>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}